<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright 2005-2015 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:camel="http://camel.apache.org/schema/spring" 
    xmlns:jaxws="http://cxf.apache.org/jaxws" 
    xmlns:jaxrs-client="http://cxf.apache.org/jaxrs-client"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://cxf.apache.org/jaxrs-client http://cxf.apache.org/schemas/jaxrs-client.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    <!-- ActiveMQ -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="brokerURL" value="tcp://amqbroker-amq-tcp:61616" />
        <property name="userName" value="admin" />
        <property name="password" value="admin" />
    </bean>
    
    <!-- MongoDB -->
    <bean id="mongodb" class="com.mongodb.Mongo">
        <constructor-arg index="0">
            <bean class="com.mongodb.MongoURI">
                <!--<constructor-arg name="uri" value="mongodb://admin:admin@mongodb-26-rhel7:27017/fis-demo" /> -->
                <constructor-arg name="uri" value="mongodb://admin:admin@mongodb-32-rhel7:27017/fis-demo" />
            </bean> 
        </constructor-arg> 
    </bean>

    <!-- json Providers -->
    <bean id="jsonProvider" class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />

    <!-- JAX-RS Client -->
    <!-- fis-demo-camel-cxfrs-fis.rhel-cdk.10.1.2.2.xip.io -->
    <!-- ${service:fis-demo-camel-cxfrs:localhost:8080} -->
    <jaxrs-client:client id="customerRestServiceClient" 
        address="http://fis-demo-camel-cxfrs:9102/rs"
        serviceClass="com.redhat.fis.rs.CustomerRest">
        <jaxrs-client:headers>
            <entry key="Accept" value="application/json" />
            <entry key="Content-Type" value="application/json" />
        </jaxrs-client:headers>
        <jaxrs-client:providers>
            <ref bean="jsonProvider" />
        </jaxrs-client:providers>
    </jaxrs-client:client>
    
    <!-- JAX-WS Client -->
    <!-- fis-demo-camel-cxf-fis.rhel-cdk.10.1.2.2.xip.io -->
    <!-- ${service:fis-demo-camel-cxf:localhost:8080} -->
    <jaxws:client id="customerWebService" 
        address="http://fis-demo-camel-cxf:9102/ws/customer/" 
        serviceClass="com.redhat.fis.ws.CustomerWS">
    </jaxws:client>                  

    <!-- Helper Processor -->
    <bean id="helperProcessor" class="com.redhat.fis.demo.eip.processor.HelperProcessor" />
    <!-- Aggregator  -->
    <bean id="accountAggregator" class="com.redhat.fis.demo.eip.aggregator.AccountAggregator" />

    <!-- Camel Context -->
    <camelContext id="camelContext-fis-demo-cxfrs" xmlns="http://camel.apache.org/schema/spring">
        <camel:endpoint
            uri="dozer:csv2json?sourceModel=org.acme.Customer&amp;targetModel=org.globex.Account&amp;marshalId=transform-json&amp;mappingFile=transformation.xml"
            id="csv2json" />

        <dataFormats>
            <bindy type="Csv" classType="org.acme.Customer" id="bindyDataformat" />

            <json id="transform-json" library="Jackson" />
            <json id="json2Account" library="Jackson" unmarshalTypeName="org.globex.Account" />
        </dataFormats>

        <route id="test-route">
            <from uri="timer:foo?period=120s" />
            <log message="Camel Context running!" />
        </route>

        <route id="load-customer-amq">
            <from uri="activemq:queue:customer-csv" />
            <log message="(AMQ) CSV data: ${body}" />
            <unmarshal ref="bindyDataformat" />
            <log message="(AMQ) Customer: ${body}" />
            <to ref="csv2json" />
            <log message="(AMQ) Account: ${body}" />
            <to uri="activemq:queue:account-json" />
        </route>

        <route id="load-account-amq">
            <from uri="activemq:queue:account-json" />
            <log message="(AMQ) Account JSON: ${body}" />
            <unmarshal ref="json2Account" />
            <log message="(AMQ) Account POJO: ${body}" />
            <to uri="direct:process-account"/>
        </route>

        <route id="processAccount">
            <from uri="direct:process-account" />
            <log message="Processing Account: ${body}" />
            <multicast strategyRef="accountAggregator" parallelProcessing="false">
                <to uri="direct:rs" />
                <to uri="direct:ws" />
            </multicast>
            <log message="Aggregate Result: ${body}" />
            <marshal ref="transform-json"/>
            <multicast parallelProcessing="true">
                <to uri="activemq:queue:account-final" />
                <to uri="direct:save-account" />
            </multicast>
        </route>
        
        <!-- Routes to Call Services -->
        <route id="callRS">
            <from uri="direct:rs" />

            <onException>
                <exception>java.lang.Exception</exception>
                <redeliveryPolicy maximumRedeliveries="1" redeliveryDelay="0" />
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Error in callRS service.\nMessage: ${exception.message}\nStack Trace:\n${exception.stacktrace}" />
            </onException>       

            <!-- Calling RS Service -->
            <log message="Invoking REST Service:\n${body}" />
            <bean ref="customerRestServiceClient" method="enrich" />
            <log message="Response from REST Service:\n${body}" />
            
            <!-- Processing Response -->
            <bean ref="helperProcessor" method="manageRESTResponse" />
            <log message="Response from customerRestServiceClient:\n${body}" />
        </route>

        <route id="callWS">
            <from uri="direct:ws" />

            <onException>
                <exception>java.lang.Exception</exception>
                <redeliveryPolicy maximumRedeliveries="1" redeliveryDelay="0" />
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Error in callWS service.\nMessage: ${exception.message}\nStack Trace:\n${exception.stacktrace}" />
            </onException>          

            <!-- Calling WS Service -->
            <log message="Invoking SOAP-WS Service:\n${body}" />
            <bean ref="customerWebService" method="updateAccount" />
            <log message="Response from SOAP-WS:\n${body}" />
        </route>
        
        <route id="mongodb-find-accounts" autoStartup="true">
            <from uri="timer:mongodbfind?period=300s" />
            <to uri="mongodb:mongodb?database=fis-demo&amp;collection=account&amp;operation=findAll" />
            <log message="findAll - collection: accounts:\n${body}\n" />
        </route>

        <route id="mongodb-insert" autoStartup="true">
            <from uri="direct:save-account" />
            <convertBodyTo type="String"/>
            <to uri="mongodb:mongodb?database=fis-demo&amp;collection=account&amp;operation=insert" />
            <log message="Account saved in database"/>
        </route>
        
    </camelContext>

</beans>
