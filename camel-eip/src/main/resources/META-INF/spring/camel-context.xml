<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright 2005-2015 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:jaxrs-client="http://cxf.apache.org/jaxrs-client"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://cxf.apache.org/jaxrs-client http://cxf.apache.org/schemas/jaxrs-client.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    <!-- JAXRS providers -->
    <bean id="jsonProvider" class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />

    <jaxrs-client:client id="customerRestServiceClient" 
        address="http://fis-java-camel-cxfrs.rhel-cdk.10.1.2.2.xip.io/rs" 
        serviceClass="com.redhat.fis.rs.CustomerRest">
            <jaxrs-client:headers>             
                <entry key="Accept" value="application/json" />
                <entry key="Content-Type" value="application/json" />
            </jaxrs-client:headers>
            <jaxrs-client:providers>
                <ref bean="jsonProvider"/>
            </jaxrs-client:providers>
    </jaxrs-client:client>
    
    <jaxws:client id="customerWebService" 
        address="http://fis-java-camel-cxf.rhel-cdk.10.1.2.2.xip.io/ws/customer/" 
        serviceClass="com.redhat.fis.ws.CustomerWS">
    </jaxws:client>                  

    
    <bean id="helperProcessor" class="com.redhat.fis.demo.eip.processor.HelperProcessor"/>
    <!-- Aggregators -->
    <bean id="accountAggregator" class="com.redhat.fis.demo.eip.aggregator.AccountAggregator"/>


  <camelContext xmlns="http://camel.apache.org/schema/spring">

    <route id="cbr-route">
      <from uri="timer:foo?period=5000"/>
      <!-- generate random number message, using a 3 digit number -->
      <transform>
        <method beanType="org.apache.commons.lang3.RandomStringUtils" method="randomNumeric(3)"/>
      </transform>
      <choice>
        <when>
          <simple>${body} &gt; 500</simple>
          <log message="High priority message : ${body}"/>
          <to uri="mock:high"/>
        </when>
        <otherwise>
          <log message="Low priority message  : ${body}"/>
          <to uri="mock:regular"/>
        </otherwise>
      </choice>
    </route>
    
        <route id="load-account">
            <from uri="timer:account?period=30s"/>
            <bean ref="helperProcessor" method="createAccount"/>
            <log message="New Account: ${body}"/>
            <multicast strategyRef="accountAggregator" parallelProcessing="false">
                <to uri="direct:rs" />
                <to uri="direct:ws" />
            </multicast>
            <log message="Result: ${body}"/>
        </route>
        
        <!-- Routes to Call Services -->    
        <route id="callRS">
            <from uri="direct:rs"/>
            
            <onException>
                <exception>java.lang.Exception</exception>
                <redeliveryPolicy maximumRedeliveries="1" redeliveryDelay="0"/>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Error in callRS service.\nMessage: ${exception.message}\nStack Trace:\n${exception.stacktrace}" />
            </onException>       
            
            <log message="Invoking REST Service (Account):\n${body}" />
<!--             <bean ref="helperProcessor" method="convertAccountToString" /> -->
            
            <!-- Preparing Http Headers -->
<!--             <setHeader headerName="CamelCxfRsUsingHttpAPI"> -->
<!--                 <constant>true</constant>         -->
<!--             </setHeader> -->
<!--             <setHeader headerName="CamelHttpMethod"> -->
<!--                 <constant>POST</constant>         -->
<!--             </setHeader> -->
<!--             <setHeader headerName="Content-Type"> -->
<!--                 <constant>application/json</constant> -->
<!--             </setHeader> -->
<!--             <setHeader headerName="CamelHttpPath"> -->
<!--                 <constant>/customerservice/enrich</constant>         -->
<!--             </setHeader> -->
<!--             <setHeader headerName="originalBody"> -->
<!--                 <constant>${body}</constant>         -->
<!--             </setHeader> -->
            
            <!-- Calling RS Service -->
            <log message="Invoking RS Service"/>
            <bean ref="customerRestServiceClient" method="enrich"/>
<!--             <inOut uri="cxfrs:bean:customerRestServiceClient"/> -->
            
            <!-- Procesing Response -->
            <bean ref="helperProcessor" method="manageRESTResponse" />
            <log message="Response from customerRestServiceClient:\n${body}"/>
        </route>
        
        <route id="callWS">
            <from uri="direct:ws"/>
            
            <onException>
                <exception>java.lang.Exception</exception>
                <redeliveryPolicy maximumRedeliveries="1" redeliveryDelay="0"/>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Error in callWS service.\nMessage: ${exception.message}\nStack Trace:\n${exception.stacktrace}" />
            </onException>          
            
            <bean ref="customerWebService" method="updateAccount"/>
<!--             <inOut uri="cxf:bean:customerWebService" /> -->
            
            <!-- Procesing Response -->
            <!-- 
            <bean ref="helperProcessor" method="manageSOAPResponse"/>
            -->
<!--             <transform> -->
<!--                 <simple>${in.body[0]}</simple> -->
<!--             </transform> -->
            <log message="Response from customerWebService:\n${body}"/>    
        </route>
        
    

  </camelContext>

</beans>
