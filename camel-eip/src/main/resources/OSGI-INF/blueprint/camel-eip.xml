<?xml version="1.0"?>
<!--

     Copyright 2005-2015 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
             http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd">

	<!-- Processors -->
	<bean id="helperProcessor" class="com.redhat.fis.demo.eip.processor.HelperProcessor"/>
	<!-- Aggregators -->
	<bean id="accountAggregator" class="com.redhat.fis.demo.eip.aggregator.AccountAggregator"/>
	
    <!-- CXF Endpoints -->
    <cxf:cxfEndpoint id="customerWebService" 
    	address="http://fis-java-camel-cxf.rhel-cdk.10.1.2.2.xip.io/ws/customer/" 
    	serviceClass="com.redhat.fis.ws.CustomerWS" 
    	loggingFeatureEnabled="true">
    </cxf:cxfEndpoint>
    
    <!-- JSON Providers -->
    <bean id="jsonProvider" class="org.codehaus.jackson.jaxrs.JacksonJsonProvider"/>
    
    <!-- CXF Clients -->
    <cxf:rsClient id="customerRestServiceClient" 
    	address="http://fis-demo-camel-cxfrs-fis.rhel-cdk.192.168.121.186.xip.io/rs" 
    	serviceClass="com.redhat.fis.rs.CustomerRest"
        loggingFeatureEnabled="true">
    		<cxf:headers>    		  
            	<entry key="Accept" value="application/json" />
            	<entry key="Content-Type" value="application/json" />
        	</cxf:headers>
        	<cxf:providers>
		       	<ref component-id="jsonProvider"/>
		    </cxf:providers>
    </cxf:rsClient>
	
    <camelContext id="camel-eip-context" xmlns="http://camel.apache.org/schema/blueprint" >
        <route id="load-account">
          	<from uri="timer:account?period=30s"/>
          	<bean ref="helperProcessor" method="createAccount"/>
            <log message="New Account: ${body}"/>
			<multicast strategyRef="accountAggregator" parallelProcessing="false">
			    <to uri="direct:rs" />
			    <to uri="direct:ws" />
			</multicast>
			<log message="Aggregated data from External Services:\n${body}"/>
        </route>
        
		<!-- Routes to Call Services -->	
		<route id="callRS">
		    <from uri="direct:rs"/>
		    
		    <onException>
				<exception>java.lang.Exception</exception>
				<redeliveryPolicy maximumRedeliveries="1" redeliveryDelay="0"/>
				<handled>
					<constant>true</constant>
				</handled>
				<log message="Error in callRS service.\nMessage: ${exception.message}\nStack Trace:\n${exception.stacktrace}" />
			</onException>		 
		    
		    <log message="Invoking REST Service (Account):\n${body}" />
		    <bean ref="helperProcessor" method="convertAccountToString" />
		    
		    <!-- Preparing Http Headers -->
		    <setHeader headerName="CamelCxfRsUsingHttpAPI">
         		<constant>true</constant>        
       		</setHeader>
		    <setHeader headerName="CamelHttpMethod">
         		<constant>POST</constant>        
       		</setHeader>
		    <setHeader headerName="Content-Type">
         		<constant>application/json</constant>
       		</setHeader>
		    <setHeader headerName="CamelHttpPath">
         		<constant>/customerservice/enrich</constant>        
       		</setHeader>
		    <setHeader headerName="originalBody">
         		<constant>${body}</constant>        
       		</setHeader>
		    
		    <!-- Calling RS Service -->
       		<log message="Invoking RS Service"/>
   		    <inOut uri="cxfrs:bean:customerRestServiceClient"/>
   		    
   		    <!-- Procesing Response -->
   		    <bean ref="helperProcessor" method="manageRESTResponse" />
   		    <log message="Response from customerRestServiceClient:\n${body}"/>
   		</route>

		<route id="callWS">
		    <from uri="direct:ws"/>
		    
		    <onException>
				<exception>java.lang.Exception</exception>
				<redeliveryPolicy maximumRedeliveries="1" redeliveryDelay="0"/>
				<handled>
					<constant>true</constant>
				</handled>
				<log message="Error in callWS service.\nMessage: ${exception.message}\nStack Trace:\n${exception.stacktrace}" />
			</onException>		    
		    
		    <inOut uri="cxf:bean:customerWebService" />
		    
		    <!-- Procesing Response -->
		    <!-- 
   		    <bean ref="helperProcessor" method="manageSOAPResponse"/>
		    -->
		    <transform>
                <simple>${in.body[0]}</simple>
            </transform>
		    <log message="Response from customerWebService:\n${body}"/>    
		</route>
        
        
        <!-- TODO timer to create a Account data and send to different end-points
        	aggregate info 
        	save into a queue
        	load data from another queue or file -->
    </camelContext>

</blueprint>
